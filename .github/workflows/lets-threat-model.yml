name: Generate Threat Model

on:
  workflow_dispatch:
    inputs:
      asset_name:
        description: "Asset name"
        required: true
        default: "Lets Threat Model"
      asset_description:
        description: "Asset description"
        required: true
        default: "An open-source threat modeling tool"
      internet_facing:
        description: "Is the asset internet-facing?"
        required: true
        default: "false"
      authn_type:
        description: "Authentication type"
        required: true
        default: "Password"
      data_classification:
        description: "Data classification"
        required: true
        default: "CONFIDENTIAL"
      repo_name:
        description: "Repository name"
        required: true
        default: "Lets Threat Model"
      repo_path:
        description: "Local repository path"
        required: true
        default: "/data"
      llm_provider:
        description: "LLM Provider"
        required: true
        default: "openai"
      categorization_agent_llm:
        description: "Categorization agent LLM"
        required: true
        default: "gpt-4o-mini"
      review_agent_llm:
        description: "Review agent LLM"
        required: true
        default: "o3-mini"
      threat_model_agent_llm:
        description: "Threat model agent LLM"
        required: true
        default: "o3-mini"
      report_agent_llm:
        description: "Report agent LLM"
        required: true
        default: "gpt-4o-mini"
      markdown_output:
        description: "Path to the Markdown report"
        required: true
        default: "threat_model_report.md"
      json_output:
        description: "Path to the JSON report"
        required: true
        default: "threat_model_report.json"
      sarif_output:
        description: "Path to the SARIF report"
        required: true
        default: "threat_model_report.sarif"
      upload_artifacts:
        description: "Upload reports as artifacts"
        required: false
        default: "true"
      upload_to_code_scanning:
        description: "Upload SARIF report to GitHub code scanning"
        required: false
        default: "true"
    
jobs:
    generate-threat-model:
        runs-on: ubuntu-latest

        env:
          MARKDOWN_OUTPUT: ${{ github.event.inputs.markdown_output }}
          JSON_OUTPUT: ${{ github.event.inputs.json_output }}
          SARIF_OUTPUT: ${{ github.event.inputs.sarif_output }}
        
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Prepare test config file
              env:
                ASSET_NAME: ${{ github.event.inputs.asset_name }}
                ASSET_DESCRIPTION: ${{ github.event.inputs.asset_description }}
                INTERNET_FACING: ${{ github.event.inputs.internet_facing }}
                AUTHN_TYPE: ${{ github.event.inputs.authn_type }}
                DATA_CLASSIFICATION: ${{ github.event.inputs.data_classification }}
                REPO_NAME: ${{ github.event.inputs.repo_name }}
                REPO_PATH: ${{ github.event.inputs.repo_path }}
                LLM_PROVIDER: ${{ github.event.inputs.llm_provider }}
                CATEGORIZATION_AGENT_LLM: ${{ github.event.inputs.categorization_agent_llm }}
                REVIEW_AGENT_LLM: ${{ github.event.inputs.review_agent_llm }}
                THREAT_MODEL_AGENT_LLM: ${{ github.event.inputs.threat_model_agent_llm }}
                REPORT_AGENT_LLM: ${{ github.event.inputs.report_agent_llm }}
              run: |
                mkdir -p config
                cat <<EOF > config/config.yaml
                asset:
                  name: "${ASSET_NAME}"
                  description: "${ASSET_DESCRIPTION}"
                  internet_facing: ${INTERNET_FACING}
                  authn_type: "${AUTHN_TYPE}"
                  data_classification: "${DATA_CLASSIFICATION}"

                repositories:
                  name: "${REPO_NAME}"
                  local_path: "${REPO_PATH}"

                config:
                  llm_provider: ${LLM_PROVIDER}
                  categorization_agent_llm: ${CATEGORIZATION_AGENT_LLM}
                  review_agent_llm: ${REVIEW_AGENT_LLM}
                  threat_model_agent_llm: ${THREAT_MODEL_AGENT_LLM}
                  report_agent_llm: ${REPORT_AGENT_LLM}
                EOF

            - name: Validate LLM API Key
              env:
                PROVIDER: ${{ github.event.inputs.llm_provider }}
                OPENAI_KEY: ${{ secrets.OPENAI_API_KEY }}
                ANTHROPIC_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
              run: |
                if [ "$PROVIDER" = "openai" ]; then
                  if [ -z "$OPENAI_KEY" ]; then
                    echo "❌ Missing OPENAI_API_KEY. Please add it as a secret input."
                    exit 1
                  else
                    echo "✅ OpenAI API key found."
                  fi
                elif [ "$PROVIDER" = "anthropic" ]; then
                  if [ -z "$ANTHROPIC_KEY" ]; then
                    echo "❌ Missing ANTHROPIC_API_KEY. Please add it as a secret input."
                    exit 1
                  else
                    echo "✅ Anthropic API key found."
                  fi
                else
                  echo "⚠️ Unknown or unsupported provider: $PROVIDER"
                  exit 1
                fi

            - name: Generate Threat Model
              uses: jesuscmartinez/lets-threat-model-github-action@v1.0.2
              with:
                config: config/config.yaml
                openai-api-key: ${{ secrets.OPENAI_API_KEY }}
                anthropic-api-key: ${{ secrets.ANTHROPIC_API_KEY }}
                markdown-output: ${{ env.MARKDOWN_OUTPUT }}
                json-output: ${{ env.JSON_OUTPUT }}
                sarif-output: ${{ env.SARIF_OUTPUT }}
                
            - name: Verify the generated Markdown report exists
              run: |
                    if [ -f "${{ env.MARKDOWN_OUTPUT }}" ]; then
                    echo "✅ Markdown report generated."
                    else
                    echo "❌ Markdown report not found!"
                    exit 1
                    fi

            - name: Verify the generated JSON report exists
              run: |
                if [ -f "${{ env.JSON_OUTPUT }}" ]; then
                echo "✅ JSON report generated."
                else
                echo "❌ JSON report not found!"
                exit 1
                fi
            - name: Verify the generated SARIF report exists
              run: |
                if [ -f "${{ env.SARIF_OUTPUT }}" ]; then
                echo "✅ SARIF report generated."
                else
                echo "❌ SARIF report not found!"
                exit 1
                fi

            - name: Upload reports as artifacts (Optional)
              if: ${{ github.event.inputs.upload_artifacts == 'true' }}
              uses: actions/upload-artifact@v4
              with:
                name: threat-model-reports
                path: |
                  ${{ env.MARKDOWN_OUTPUT }}
                  ${{ env.JSON_OUTPUT }}
                  ${{ env.SARIF_OUTPUT }}
                  
            - name: Upload SARIF file to GitHub Code Scanning
              if: ${{ github.event.inputs.upload_to_code_scanning == 'true' }}
              uses: github/codeql-action/upload-sarif@v3
              with:
                sarif_file: ${{ env.SARIF_OUTPUT }}